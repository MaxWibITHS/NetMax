@using VOD.Common.DTOs;
@using VOD.Common.Services;

@inject IAdminService AdminService

<div class="d-xl-flex justify-content-center">
    <EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
        <DataAnnotationsValidator />
        <h4>@Page SimilarFilm</h4>
        <div class="mb-3">
            @if (Page.Equals(PageType.Delete))
            {
                <InputNumber id="name" class="form-control me-2" @bind-Value="Model.FilmId" placeholder="FilmId"></InputNumber>
                <InputNumber id="name" class="form-control me-2" @bind-Value="Model.SimilarFilmId" placeholder="SimilarFilmId"></InputNumber>
            }
            else
            {
                <InputNumber id="name" class="form-control me-2" @bind-Value="Model.FilmId" placeholder="FilmId"></InputNumber>
                <InputNumber id="name" class="form-control me-2" @bind-Value="Model.SimilarFilmId" placeholder="SimilarFilmId"></InputNumber>
            }
            <ValidationMessage For="@(() => Model)" />
        </div>
        @if (!Page.Equals(PageType.Delete))
        {

            @*<InputSelect @bind-Value="Model.Name" class="form-control mb-3">
        <option value=0>Name...</option>
        @if (Directors != null)
        {
        foreach (var director in Directors)
        {
        <option value="@director.Id">@director.Name</option>
        }
        }
        </InputSelect>*@



            @*<InputSelect @bind-Value="Model.Genres" class="form-control mb-3">
        <option value=0>Genre ...</option>
        @if (Genres != null)
        {
        foreach (var genre in Genres)
        {
        <option value="@genre.Id">@genre.Name</option>
        }
        }
        </InputSelect>*@
        }
        <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary") rounded-0">@Page</button>
    </EditForm>
</div>

@code {
    [Parameter] public SimilarFilmDTO Model { get; set; } = new();
    [Parameter] public string Page { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnChanged { get; set; }
    List<GenreDTO> Genres { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        Genres = await AdminService.GetAsync<GenreDTO>("genre");

    }

    private async Task OnFormSubmit()
    {
        try
        {
            if (Page.Equals(PageType.Create))
                await AdminService.CreateAsync<SimilarFilmDTO>("similarfilm", Model);
            //else if (Page.Equals(PageType.Edit))
            //    await AdminService.EditAsync<FilmGenreDTO>($"filmgenre/{Model.FilmId}", Model);
            else if (Page.Equals(PageType.Delete))
                await AdminService.DeleteAsync<FilmGenreDTO>($"similarfilm/{Model.FilmId}/{Model.SimilarFilmId}");

            await OnChanged.InvokeAsync("");
        }
        catch
        {
            await OnChanged.InvokeAsync("Couldn't create/edit/delete the course.");
        }
    }
}
